<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>luutry</title>
  
  <subtitle>to be simple</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="bytebeta.github.io/"/>
  <updated>2019-01-08T13:41:01.431Z</updated>
  <id>bytebeta.github.io/</id>
  
  <author>
    <name>luutry</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>日常吐槽</title>
    <link href="bytebeta.github.io/2019/01/08/%E6%97%A5%E5%B8%B8%E5%90%90%E6%A7%BD/"/>
    <id>bytebeta.github.io/2019/01/08/%E6%97%A5%E5%B8%B8%E5%90%90%E6%A7%BD/</id>
    <published>2019-01-08T13:28:03.000Z</published>
    <updated>2019-01-08T13:41:01.431Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>和不懂你的人聊天，多说几句话都很累，是的，我现在很累的。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;和不懂你的人聊天，多说几句话都很累，是的，我现在很累的。&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="BB一下" scheme="bytebeta.github.io/tags/BB%E4%B8%80%E4%B8%8B/"/>
    
      <category term="另一种小情绪" scheme="bytebeta.github.io/tags/%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%B0%8F%E6%83%85%E7%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>新手上路</title>
    <link href="bytebeta.github.io/2018/12/02/%E6%96%B0%E6%89%8B%E4%B8%8A%E8%B7%AF/"/>
    <id>bytebeta.github.io/2018/12/02/%E6%96%B0%E6%89%8B%E4%B8%8A%E8%B7%AF/</id>
    <published>2018-12-02T12:47:41.000Z</published>
    <updated>2018-12-02T14:04:10.768Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今年年初，差不多三月份的时候，我简单列了一个目标清单，写了一封寄给未来的一封信，而在我已经遗忘掉这个事情的时候，几个星期前我收到了那封信。看完后，失落感超强，内心觉得自己是个loser，彻底的。想想自己，没几年蹦跶就而立之年，什么事都没有做好，也没有做成，挫败感无穷无尽。</p></blockquote><a id="more"></a><p>昨晚出差刚回来，就和同事计划好今天租车练练车，同事和我一样，拿到驾照好久了，一直没有机会开车，这次我一提租车来练习，俩人意见马上统一啦。</p><p>早上，同事过来，说找共享汽车来开，结果附近没有找不到，就直接杀到附近的一嗨租车点去了，折腾了好一会，以为我最近身份证遗失了，没来得及补办，没办法直接租车，只能用同事的身份证驾驶证了，还好不是太麻烦，二十多分钟手续就都办好了，直接提车上路。</p><p>刚开始开车，我和同事都很紧张，开了一会就放松了起来，油门也敢踩深一点了，一路飙车不亦乐乎，原来开车上路也不过如此，哈哈。</p><p>不多说了，哈哈，直接上几张图压压惊。</p><p><a href="https://imgchr.com/i/FKA26I" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKA26I.md.jpg" alt="FKA26I.md.jpg" /></a><br /><a href="https://imgchr.com/i/FKAg1A" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKAg1A.md.jpg" alt="FKAg1A.md.jpg" /></a><br /><a href="https://imgchr.com/i/FKicpn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKicpn.md.jpg" alt="FKicpn.md.jpg" /></a><br /><a href="https://imgchr.com/i/FKisYj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKisYj.md.jpg" alt="FKisYj.md.jpg" /></a><br /><a href="https://imgchr.com/i/FKirkQ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKirkQ.md.jpg" alt="FKirkQ.md.jpg" /></a><br /><a href="https://imgchr.com/i/FKiBTg" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKiBTg.md.jpg" alt="FKiBTg.md.jpg" /></a><br /><a href="https://imgchr.com/i/FKiaOf" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKiaOf.md.jpg" alt="FKiaOf.md.jpg" /></a><br /><a href="https://imgchr.com/i/FKiNlt" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKiNlt.md.jpg" alt="FKiNlt.md.jpg" /></a><br /><a href="https://imgchr.com/i/FKi8FH" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKi8FH.md.jpg" alt="FKi8FH.md.jpg" /></a><br /><a href="https://imgchr.com/i/FKPSbD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/12/02/FKPSbD.md.jpg" alt="FKPSbD.md.jpg" /></a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;今年年初，差不多三月份的时候，我简单列了一个目标清单，写了一封寄给未来的一封信，而在我已经遗忘掉这个事情的时候，几个星期前我收到了那封信。看完后，失落感超强，内心觉得自己是个loser，彻底的。想想自己，没几年蹦跶就而立之年，什么事都没有做好，也没有做成，挫败感无穷无尽。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="BB一下" scheme="bytebeta.github.io/tags/BB%E4%B8%80%E4%B8%8B/"/>
    
      <category term="另一种小情绪" scheme="bytebeta.github.io/tags/%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%B0%8F%E6%83%85%E7%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>windows程序开发记录</title>
    <link href="bytebeta.github.io/2018/11/14/windows%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>bytebeta.github.io/2018/11/14/windows%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</id>
    <published>2018-11-14T01:50:02.000Z</published>
    <updated>2018-11-14T10:24:27.312Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记下windows开发中遇到的一些奇奇怪怪的问题，然后自己找资料啊解决的方法。</p></blockquote><a id="more"></a><h1 id="tips"><a class="markdownIt-Anchor" href="#tips"></a> Tips</h1><h2 id="根据程序路径找到程序的句柄然后关闭"><a class="markdownIt-Anchor" href="#根据程序路径找到程序的句柄然后关闭"></a> 根据程序路径找到程序的句柄，然后关闭</h2><ul><li>思路：遍历一遍进程，得到进程id，通过进程id获取相关的信息，比对路径，得到句柄。然后开始关闭进程。</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以下操作就是根据pName（程序完整路径）来查到对应的句柄</span></span><br><span class="line"></span><br><span class="line">HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_HANDLE_VALUE == hSnapshot) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">CString sPath;</span><br><span class="line">PROCESSENTRY32 pe = &#123; <span class="keyword">sizeof</span>(pe) &#125;;</span><br><span class="line">OutputDebugString(_T(<span class="string">"------Begin------\n"</span>));</span><br><span class="line"><span class="keyword">for</span> (BOOL ret = Process32First(hSnapshot, &amp;pe); ret; ret = Process32Next(hSnapshot, &amp;pe))</span><br><span class="line">&#123;</span><br><span class="line">HANDLE process = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, pe.th32ProcessID);</span><br><span class="line"><span class="keyword">if</span> (process == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> XP_OS   <span class="comment">// XP和Win7有差别，所以分开了</span></span></span><br><span class="line">GetProcessFilePath(process, sPath);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">TCHAR file_path[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">GetModuleFileNameEx(process, <span class="literal">NULL</span>, file_path, MAX_PATH);</span><br><span class="line">sPath = CString(file_path);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// XP_OS</span></span></span><br><span class="line">CloseHandle(process);</span><br><span class="line"></span><br><span class="line">OutputDebugString(sPath+_T(<span class="string">"\n"</span>));</span><br><span class="line"><span class="keyword">if</span> (sPath == pName)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 根据进程id得到程序的handle</span></span><br><span class="line">HANDLE handle1 = OpenProcess(PROCESS_TERMINATE, FALSE, pe.th32ProcessID);</span><br><span class="line"><span class="comment">// 结束进程</span></span><br><span class="line">TerminateProcess(handle1, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭遍历进程的handle</span></span><br><span class="line">OutputDebugString(_T(<span class="string">"------End------\n"</span>));</span><br><span class="line">CloseHandle(hSnapshot);</span><br></pre></td></tr></table></figure><h2 id="隐藏窗口任务栏取消显示图标"><a class="markdownIt-Anchor" href="#隐藏窗口任务栏取消显示图标"></a> 隐藏窗口，任务栏取消显示图标</h2><ul><li>思路：网上有好多方法，我也参考着照做了，可在win7下，但在win10下面就可以，在任务栏还是会出现程序图标。后来好不容易找到一个资料了，解决了win7隐藏不了任务栏图标的情况。</li></ul><p>网上隐藏窗口的方法：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在InitInstance函数内添加一个隐藏的窗口</span></span><br><span class="line">CWnd wndOwner;</span><br><span class="line"><span class="keyword">if</span> (wndOwner.m_hWnd == <span class="literal">NULL</span>)</span><br><span class="line">&#123; </span><br><span class="line">LPCTSTR pstrOwnerClass = AfxRegisterWndClass(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (!wndOwner.CreateEx(<span class="number">0</span>, </span><br><span class="line">pstrOwnerClass, </span><br><span class="line">_T(<span class="string">""</span>), <span class="comment">//创建一个隐藏的弹出样式的窗口</span></span><br><span class="line">WS_POPUP, </span><br><span class="line">CW_USEDEFAULT, </span><br><span class="line">CW_USEDEFAULT, </span><br><span class="line">CW_USEDEFAULT, </span><br><span class="line">CW_USEDEFAULT, </span><br><span class="line"><span class="literal">NULL</span>, </span><br><span class="line"><span class="number">0</span>))</span><br><span class="line"><span class="keyword">return</span> FALSE; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把隐藏的窗口设置为程序的父窗口</span></span><br><span class="line"><span class="function">CXXXDlg <span class="title">dlg</span><span class="params">(&amp;wndOwner)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后完了隐藏的窗口销毁</span></span><br><span class="line"><span class="keyword">if</span> (wndOwner.m_hWnd != <span class="literal">NULL</span>)</span><br><span class="line">wndOwner.DestroyWindow();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 很多博客里面写的就是这样修改窗体样式，去除任务栏程序图标，结果我在win7下面无效，很是头疼</span></span><br><span class="line">ModifyStyleEx(WS_EX_APPWINDOW, WS_EX_TOOLWINDOW);</span><br></pre></td></tr></table></figure><p>小尾巴图片</p><p align='left'>![小尾巴的图片](https://s1.ax1x.com/2018/11/14/ij3mO1.gif)<p><p>实际测试有用的代码，通过ITaskbarList来控制任务栏图标，win7亲测有效</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需要传入窗口句柄</span></span><br><span class="line"><span class="function">BOOL <span class="title">ShowInTaskbar</span><span class="params">(HWND hWnd, BOOL bShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HRESULT hr;</span><br><span class="line">ITaskbarList* pTaskbarList;</span><br><span class="line">hr = CoCreateInstance( CLSID_TaskbarList, <span class="literal">NULL</span>, CLSCTX_INPROC_SERVER, </span><br><span class="line">IID_ITaskbarList, (<span class="keyword">void</span>**)&amp;pTaskbarList );</span><br><span class="line"><span class="keyword">if</span>(SUCCEEDED(hr))</span><br><span class="line">&#123;</span><br><span class="line">pTaskbarList-&gt;HrInit();</span><br><span class="line"><span class="keyword">if</span>(bShow)</span><br><span class="line">pTaskbarList-&gt;AddTab(hWnd);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">pTaskbarList-&gt;DeleteTab(hWnd);</span><br><span class="line"></span><br><span class="line">pTaskbarList-&gt;Release();</span><br><span class="line"><span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记下windows开发中遇到的一些奇奇怪怪的问题，然后自己找资料啊解决的方法。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="为学" scheme="bytebeta.github.io/tags/%E4%B8%BA%E5%AD%A6/"/>
    
      <category term="C++" scheme="bytebeta.github.io/tags/C/"/>
    
      <category term="windows" scheme="bytebeta.github.io/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>halcon文字识别</title>
    <link href="bytebeta.github.io/2018/10/20/halcon%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/"/>
    <id>bytebeta.github.io/2018/10/20/halcon%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/</id>
    <published>2018-10-20T11:42:33.000Z</published>
    <updated>2018-10-29T12:14:16.401Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Halcon是一个强大的视觉处理库，是商业用途的，这个得授权，不过用起来是很强大，文档比较全面强大。</p></blockquote><a id="more"></a><h3 id="文字识别代码"><a class="markdownIt-Anchor" href="#文字识别代码"></a> 文字识别代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hobject  Image;</span><br><span class="line">read_image(&amp;Image, &quot;D:\\5.jpg&quot;);</span><br><span class="line">&#x2F;&#x2F; Local iconic variables </span><br><span class="line">Hobject  ROI_OCR_01_0, TmpObj_Mono, TmpObj_MonoReduced_OCR_01_0;</span><br><span class="line">Hobject  TmpObj_Domain, TmpObj_DomainExpanded, TmpObj_DomainTransformedRaw;</span><br><span class="line">Hobject  TmpObj_DomainTransformed, TmpObj_ImageTransformed;</span><br><span class="line">Hobject  TmpObj_ImageTransformedExpanded, TmpObj_ImageTransformedReduced;</span><br><span class="line">Hobject  TmpObj_MonoInverted_OCR_01_0, Symbols_OCR_01_0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Local control variables </span><br><span class="line">HTuple  TextModel, OcrHandle, TmpCtrl_MatrixIdentity;</span><br><span class="line">HTuple  TmpCtrl_ClipRegion, TmpCtrl_Row1, TmpCtrl_Col1;</span><br><span class="line">HTuple  TmpCtrl_Row2, TmpCtrl_Col2, TmpCtrl_MatrixTranslation;</span><br><span class="line">HTuple  TmpCtrl_MatrixComposite, TmpCtrl_ResultHandle_OCR_01_0;</span><br><span class="line">HTuple  SymbolNames_OCR_01_0, Confidences_OCR_01_0;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 创建text模型，字体分割参数等，用于后面的分割字体区域</span><br><span class="line">create_text_model(&amp;TextModel);</span><br><span class="line">set_text_model_param(TextModel, &quot;polarity&quot;, &quot;light_on_dark&quot;);</span><br><span class="line">set_text_model_param(TextModel, &quot;char_width&quot;, 92);</span><br><span class="line">set_text_model_param(TextModel, &quot;char_height&quot;, 144);</span><br><span class="line">set_text_model_param(TextModel, &quot;stroke_width&quot;, 21.4);</span><br><span class="line">&#x2F;&#x2F;*set_text_model_param (TextModel, &#39;fragment_size_min&#39;, 5)</span><br><span class="line">&#x2F;&#x2F;*set_text_model_param (TextModel, &#39;eliminate_border_blobs&#39;, &#39;true&#39;)</span><br><span class="line">set_text_model_param(TextModel, &quot;base_line_tolerance&quot;, 0.2);</span><br><span class="line">set_text_model_param(TextModel, &quot;max_line_num&quot;, 2);</span><br><span class="line">&#x2F;&#x2F; 加载字库，这里用的是默认的工业字库</span><br><span class="line">read_ocr_class_mlp(&quot;Industrial.omc&quot;, &amp;OcrHandle);</span><br><span class="line">&#x2F;&#x2F; 本来是选取识别的区域的，这里用的是全部图像</span><br><span class="line">HTuple h1, w1;</span><br><span class="line">get_image_size(Image, &amp;w1, &amp;h1);</span><br><span class="line">gen_rectangle1(&amp;ROI_OCR_01_0, 0, 0, h1, w1);</span><br><span class="line">&#x2F;&#x2F; 截取图像区域</span><br><span class="line">access_channel(Image, &amp;TmpObj_Mono, 1);</span><br><span class="line">reduce_domain(TmpObj_Mono, ROI_OCR_01_0, &amp;TmpObj_MonoReduced_OCR_01_0);</span><br><span class="line"></span><br><span class="line">hom_mat2d_identity(&amp;TmpCtrl_MatrixIdentity);</span><br><span class="line">get_domain(TmpObj_MonoReduced_OCR_01_0, &amp;TmpObj_Domain);</span><br><span class="line">get_system(&quot;clip_region&quot;, &amp;TmpCtrl_ClipRegion);</span><br><span class="line">set_system(&quot;clip_region&quot;, &quot;false&quot;);</span><br><span class="line">dilation_circle(TmpObj_Domain, &amp;TmpObj_DomainExpanded, 107);</span><br><span class="line">affine_trans_region(TmpObj_DomainExpanded, &amp;TmpObj_DomainTransformedRaw, TmpCtrl_MatrixIdentity, </span><br><span class="line">&quot;true&quot;);</span><br><span class="line">smallest_rectangle1(TmpObj_DomainTransformedRaw, &amp;TmpCtrl_Row1, &amp;TmpCtrl_Col1, </span><br><span class="line">&amp;TmpCtrl_Row2, &amp;TmpCtrl_Col2);</span><br><span class="line">hom_mat2d_translate(TmpCtrl_MatrixIdentity, -TmpCtrl_Row1, -TmpCtrl_Col1, &amp;TmpCtrl_MatrixTranslation);</span><br><span class="line">hom_mat2d_compose(TmpCtrl_MatrixTranslation, TmpCtrl_MatrixIdentity, &amp;TmpCtrl_MatrixComposite);</span><br><span class="line">affine_trans_region(TmpObj_Domain, &amp;TmpObj_DomainTransformed, TmpCtrl_MatrixComposite, </span><br><span class="line">&quot;true&quot;);</span><br><span class="line">affine_trans_image(TmpObj_MonoReduced_OCR_01_0, &amp;TmpObj_ImageTransformed, TmpCtrl_MatrixComposite, </span><br><span class="line">&quot;constant&quot;, &quot;true&quot;);</span><br><span class="line">dilation_circle(TmpObj_Domain, &amp;TmpObj_DomainExpanded, 107);</span><br><span class="line">expand_domain_gray(TmpObj_ImageTransformed, &amp;TmpObj_ImageTransformedExpanded, 107);</span><br><span class="line">reduce_domain(TmpObj_ImageTransformed, TmpObj_DomainTransformed, &amp;TmpObj_ImageTransformedReduced</span><br><span class="line">);</span><br><span class="line">crop_part(TmpObj_ImageTransformedReduced, &amp;TmpObj_MonoReduced_OCR_01_0, 0, 0, (TmpCtrl_Col2-TmpCtrl_Col1)+1, </span><br><span class="line">(TmpCtrl_Row2-TmpCtrl_Row1)+1);</span><br><span class="line">&#x2F;&#x2F; set_system(&quot;clip_region&quot;, TmpCtrl_ClipRegion);</span><br><span class="line">&#x2F;&#x2F; 根据字库模型，识别文字</span><br><span class="line">Halcon::find_text(TmpObj_MonoReduced_OCR_01_0, TextModel, &amp;TmpCtrl_ResultHandle_OCR_01_0);</span><br><span class="line">invert_image(TmpObj_MonoReduced_OCR_01_0, &amp;TmpObj_MonoInverted_OCR_01_0);</span><br><span class="line">get_text_object(&amp;Symbols_OCR_01_0, TmpCtrl_ResultHandle_OCR_01_0, &quot;all_lines&quot;);</span><br><span class="line">clear_text_result(TmpCtrl_ResultHandle_OCR_01_0);</span><br><span class="line">&#x2F;&#x2F; disp_obj(TmpObj_MonoInverted_OCR_01_0, ht_window);</span><br><span class="line">set_draw(ht_window,&quot;fill&quot;);</span><br><span class="line">set_colored(ht_window,3);</span><br><span class="line">disp_obj(Image, ht_window);</span><br><span class="line">disp_obj(Symbols_OCR_01_0, ht_window);</span><br><span class="line">do_ocr_multi_class_mlp(Symbols_OCR_01_0, TmpObj_MonoInverted_OCR_01_0, OcrHandle, </span><br><span class="line">&amp;SymbolNames_OCR_01_0, &amp;Confidences_OCR_01_0);</span><br><span class="line"></span><br><span class="line">clear_text_model(TextModel);</span><br><span class="line">clear_ocr_class_mlp(OcrHandle);</span><br><span class="line">write_string(ht_window, SymbolNames_OCR_01_0);</span><br></pre></td></tr></table></figure><h3 id="知识点"><a class="markdownIt-Anchor" href="#知识点"></a> 知识点</h3><ol><li>主要是设置TextModel的字符宽度，高度，高亮等；</li><li>如果字库OK，一般识别，都很容易，一下就识别到了。</li></ol><h3 id="效果预览"><a class="markdownIt-Anchor" href="#效果预览"></a> 效果预览</h3><p><img src="https://i.loli.net/2018/10/29/5bd6f8c8c4c4c.gif" alt="文字识别.gif" /></p><blockquote><p>我自己是在halcon 10下面做项目，看到halcon 13有OCR助手，训练或者生成字库都很容易，分隔字符，一下子就出来了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Halcon是一个强大的视觉处理库，是商业用途的，这个得授权，不过用起来是很强大，文档比较全面强大。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="为学" scheme="bytebeta.github.io/tags/%E4%B8%BA%E5%AD%A6/"/>
    
      <category term="C++" scheme="bytebeta.github.io/tags/C/"/>
    
      <category term="halcon" scheme="bytebeta.github.io/tags/halcon/"/>
    
  </entry>
  
  <entry>
    <title>OpenCv</title>
    <link href="bytebeta.github.io/2018/10/17/OpenCv/"/>
    <id>bytebeta.github.io/2018/10/17/OpenCv/</id>
    <published>2018-10-17T09:15:56.000Z</published>
    <updated>2018-10-20T11:46:06.023Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>OpenCV 是一个开源的计算机视觉和机器学习库。它包含成千上万优化过的算法，为各种计算机视觉应用提供了一个通用工具包。而我想用OpenCV做点东西。</p></blockquote><a id="more"></a><h3 id="opencv主要模块"><a class="markdownIt-Anchor" href="#opencv主要模块"></a> OpenCV主要模块</h3><ul><li>core：简洁的核心模块，定义了基本的数据结构，包括稠密多维数组Mat和其他模块需要的基本函数。</li><li>imgproc：图像处理模块，包括线性和非线性图像滤波、几何图像转换 (缩放、仿射与透视变换、一般性基于表的重映射)、颜色空间转换、直方图等等。</li><li>video：视频分析模块，包括运动估计、背景消除、物体跟踪算法。</li><li>calib3d：包括基本的多视角几何算法、单体和立体相机的标定、对象姿态估计、双目立体匹配算法和元素的三维重建。</li><li>features2d：包含了显著特征检测算法、描述算子和算子匹配算法。</li><li>objdetect：物体检测和一些预定义的物体的检测 (如人脸、眼睛、杯子、人、汽车等)。</li><li>ml：多种机器学习算法，如 K 均值、支持向量机和神经网络。</li><li>highgui：一个简单易用的接口，提供视频捕捉、图像和视频编码等功能，还有简单的 UI 接口 (iOS 上可用的仅是其一个子集)。</li><li>gpu：OpenCV 中不同模块的 GPU 加速算法 (iOS 上不可用)。</li><li>ocl：使用 OpenCL 实现的通用算法 (iOS 上不可用)。</li><li>一些其它辅助模块，如 Python 绑定和用户贡献的算法。</li></ul><h3 id="基础类和操作"><a class="markdownIt-Anchor" href="#基础类和操作"></a> 基础类和操作</h3><p>OpenCV 包含几百个类。为简便起见，我们只看几个基础的类和操作，进一步阅读请参考全部文档。过一遍这几个核心类应该足以对这个库的机理产生一些感觉认识。</p><h4 id="cvmat"><a class="markdownIt-Anchor" href="#cvmat"></a> cv::Mat</h4><p>cv::Mat是 OpenCV 的核心数据结构，用来表示任意 N 维矩阵。因为图像只是 2 维矩阵的一个特殊场景，所以也是使用cv::Mat来表示的。也就是说，cv::Mat将是你在 OpenCV 中用到最多的类。</p><p>一个cv::Mat实例的作用就像是图像数据的头，其中包含着描述图像格式的信息。图像数据只是被引用，并能为多个cv::Mat实例共享。OpenCV 使用类似于 ARC 的引用计数方法，以保证当最后一个来自cv::Mat的引用也消失的时候，图像数据会被释放。图像数据本身是图像连续的行的数组 (对 N 维矩阵来说，这个数据是由连续的 N-1 维数据组成的数组)。使用step[]数组中包含的值，图像的任一像素地址都可通过下面的指针运算得到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uchar *pixelPtr &#x3D; cvMat.data + rowIndex * cvMat.step[0] + colIndex * cvMat.step[1]</span><br></pre></td></tr></table></figure><p>每个像素的数据格式可以通过type()方法获得。除了常用的每通道 8 位无符号整数的灰度图 (1 通道，CV_8UC1) 和彩色图 (3 通道，CV_8UC3)，OpenCV 还支持很多不常用的格式，例如CV_16SC3(每像素 3 通道，每通道使用 16 位有符号整数)，甚至CV_64FC4(每像素 4 通道，每通道使用 64 位浮点数)。</p><h4 id="cvalgorithm"><a class="markdownIt-Anchor" href="#cvalgorithm"></a> cv::Algorithm</h4><p>Algorithm是 OpenCV 中实现的很多算法的抽象基类，包括将在我们的 demo 工程中用到的FaceRecognizer。它提供的 API 与苹果的 Core Image 框架中的CIFilter有些相似之处。创建一个Algorithm的时候使用算法的名字来调用Algorithm::create()，并且可以通过get()和set()方法来获取和设置各个参数，这有点像是键值编码。另外，Algorithm从底层就支持从/向 XML 或 YAML 文件加载/保存参数的功能。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;OpenCV 是一个开源的计算机视觉和机器学习库。它包含成千上万优化过的算法，为各种计算机视觉应用提供了一个通用工具包。而我想用OpenCV做点东西。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="为学" scheme="bytebeta.github.io/tags/%E4%B8%BA%E5%AD%A6/"/>
    
      <category term="OpenCv" scheme="bytebeta.github.io/tags/OpenCv/"/>
    
      <category term="C++" scheme="bytebeta.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>莲藕汤</title>
    <link href="bytebeta.github.io/2018/10/01/%E8%8E%B2%E8%97%95%E6%B1%A4/"/>
    <id>bytebeta.github.io/2018/10/01/%E8%8E%B2%E8%97%95%E6%B1%A4/</id>
    <published>2018-10-01T03:33:05.000Z</published>
    <updated>2018-10-01T04:59:41.844Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我想吃老妈炖的藕汤了。记得老妈做藕汤，会在瓦罐里，用新鲜的排骨打底，加上不少莲藕，就这么炖几个小时，莲藕就会得非常粉了，汤面上会撒些葱花，也就这几样常见的食材，被老妈做成藕汤后，一直让我念念不忘。嗯，每次想到莲藕汤的时候，就是我妈想我了，所以，我得回家了。</p></blockquote><a id="more"></a><p>我已经不记得是从什么时候开始从爸妈身旁离开，再回去，离开，再回去，这样反反复复来来回回。读书那会，我是背上包，就跟我妈打声招呼，自己一个人就离家了，也不要人送；工作后，我还是背了包，跟我妈说了几句就要走，还是一个人，可我爸就非要送我了；到现在，我妈炖好莲藕汤，候着我回家，我爸骑着电动车来接我，离家的时候空了就送我坐车。可能，他们是越来越依赖我了。</p><p>我想起了，我爸妈看到我回来的表情，笑起来喊着我的名字，然后给我弄吃的。幸福的感觉虽然不会很久，但就那么一瞬间，也是不错的。记得上次我爸唠叨我妈，说我妈饭做不好吃，连炒饭都抄糊了。就那么一瞬间，我感觉自己安慰了自己那么多年。我小时候真的以为，不止是我妈做的饭菜不好吃，做饭都那样吧，结果过了这么多年我才知道，真的只是我妈做饭不好吃啊，难怪我自己不怎么挑食的，原来是小时候的生活环境锻炼出来的了。不过还好我妈有拿得出手的，那就是炖的莲藕汤了，喝了还想再喝的。</p><p>明天，我就回家了。多年来，我从没有像今天这么犹豫，这么踟蹰。我长大了，嗯，成了家里的顶梁柱。而我爸妈，年龄越来越大，白发越来越多了，唠叨也更多了。他们在老去，我能做什么呢？年少时，我志在千里，誓要走遍山川，哪怕现在，我还有这个想法。只是，我已经不再那么强烈了，更强烈的是，给我父母一个保障。</p><p>我知道：归来时，已不再年少。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我想吃老妈炖的藕汤了。记得老妈做藕汤，会在瓦罐里，用新鲜的排骨打底，加上不少莲藕，就这么炖几个小时，莲藕就会得非常粉了，汤面上会撒些葱花，也就这几样常见的食材，被老妈做成藕汤后，一直让我念念不忘。嗯，每次想到莲藕汤的时候，就是我妈想我了，所以，我得回家了。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="BB一下" scheme="bytebeta.github.io/tags/BB%E4%B8%80%E4%B8%8B/"/>
    
      <category term="另一种小情绪" scheme="bytebeta.github.io/tags/%E5%8F%A6%E4%B8%80%E7%A7%8D%E5%B0%8F%E6%83%85%E7%BB%AA/"/>
    
  </entry>
  
  <entry>
    <title>连想想都这么随意</title>
    <link href="bytebeta.github.io/2018/09/13/%E8%BF%9E%E6%83%B3%E6%83%B3%E9%83%BD%E8%BF%99%E4%B9%88%E9%9A%8F%E6%84%8F/"/>
    <id>bytebeta.github.io/2018/09/13/%E8%BF%9E%E6%83%B3%E6%83%B3%E9%83%BD%E8%BF%99%E4%B9%88%E9%9A%8F%E6%84%8F/</id>
    <published>2018-09-13T00:29:13.000Z</published>
    <updated>2018-09-13T10:04:51.313Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天都在上班的路上挣扎，都会胡思乱想一阵，有时候思如泉涌，如老僧入定一般，有时候心惊胆战，左顾右盼，焦躁不已。一天即将开始的工作心情，也会随着这时臆想的大结局而变化，可最终结果还是老样子：忍气吞声，呵呵一笑。不管怎么样，班车时间的空余时间，给了我在自己的世界里为王的机会。</p></blockquote><a id="more"></a><p>今天下午的太阳好大，通过办公室的窗户照过来，还是辣么刺眼炽热，一点都没有秋天的味道。</p><p>不知不觉，在深圳已经呆了五个年头了，我还记得刚来深圳的时候，觉得哪里都新鲜，第一次知道深圳原来有个地王大厦，还辣么高；第一次坐深铁，记住了两条线的名字：罗宝线，龙华线；第一次看到大海，浪潮翻滚来翻滚过去；第一次面试，西装格林，被刷了，接下来没有面试成功过…第一次飞机到重庆出差，满怀期待，虽然结局不愉快，但过程还是很快乐的…</p><p>稍不留神，已经度过了相当长的一段时间。曾经以为自己并不差，可是来到了这个地方，处处碰壁，连最卑微的自信都没有了，觉得自己真的很差。我想，之前做的唯一正确的事情，就是踏踏实实坚持了下来，一点一点地往前走，确实是慢了些，可还是有点进步了。现在看来，还是得感谢下曾经的自己熬过的夜，填过的坑，做过的傻事。</p><p>我不是一个聪明的人，一直以来，都不是。现在，我越来越想做一个踏实的人，一步一步，虽然离我的目标远了些，但是不要紧，我还可以吧 <sup>_</sup> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每天都在上班的路上挣扎，都会胡思乱想一阵，有时候思如泉涌，如老僧入定一般，有时候心惊胆战，左顾右盼，焦躁不已。一天即将开始的工作心情，也会随着这时臆想的大结局而变化，可最终结果还是老样子：忍气吞声，呵呵一笑。不管怎么样，班车时间的空余时间，给了我在自己的世界里为王的机会。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="BB一下" scheme="bytebeta.github.io/tags/BB%E4%B8%80%E4%B8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Git使用笔记</title>
    <link href="bytebeta.github.io/2018/09/09/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <id>bytebeta.github.io/2018/09/09/Git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</id>
    <published>2018-09-09T10:59:40.000Z</published>
    <updated>2018-09-26T08:31:30.816Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Git是个好东西，慢慢了解后，到使用它，管理代码，很是方便。在开发的工程中，总是会遇到一堆问题，最头疼的就是恢复上一个版本，或者找到很久不更新的代码，一般找来找去都会找不到。呵呵，我就是这样的啦。</p></blockquote><a id="more"></a><h2 id="git简介"><a class="markdownIt-Anchor" href="#git简介"></a> Git简介</h2><p>Git是一个开源的分布式版本控制系统，可以有效、高速的处理从很小到非常大的项目版本管理。Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。简单来说，就是用来管理代码的，因为很多人都在用，而且很多人都说好，那我也就来试试咯，结果还真的不错呢。</p><h2 id="git命令"><a class="markdownIt-Anchor" href="#git命令"></a> Git命令</h2><h3 id="常用的命令"><a class="markdownIt-Anchor" href="#常用的命令"></a> 常用的命令</h3><p>我在使用过程中用到的git命令不多，呵呵，也就那么些，我用到了就记下来了。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 在当前目录新建一个Git代码库</span><br><span class="line">$ git init --bare</span><br><span class="line"></span><br><span class="line"># 下载一个项目和它的整个代码历史</span><br><span class="line"># 虚拟机地址格式, hello是服务器端登录用户名, 如url可以是这样的: hello@192.168.128.130:&#x2F;home&#x2F;WorkCode&#x2F;hello.git</span><br><span class="line">$ git clone [url] </span><br><span class="line"></span><br><span class="line"># 修改仓库所属用户为hello如上，下面操作就是把hello赋予操作hello.git库的权限</span><br><span class="line">$ cd &#x2F;home&#x2F;WorkCode&#x2F;</span><br><span class="line">$ chown -R hello hello.git  </span><br><span class="line"></span><br><span class="line"># 添加忽略文件</span><br><span class="line">$ touch .gitignore</span><br><span class="line"></span><br><span class="line"># 关联远程仓库</span><br><span class="line">$ git remote add origin hello@192.168.128.130:&#x2F;home&#x2F;WorkCode&#x2F;hello.git</span><br><span class="line"></span><br><span class="line"># 取消本地目录下关联的远程库</span><br><span class="line">$ git remote remove origin</span><br><span class="line"></span><br><span class="line"># 推送到远程仓库</span><br><span class="line">$ git push -u origin master</span><br><span class="line"></span><br><span class="line"># 显示commit历史，以及每次commit发生变更的文件</span><br><span class="line">$ git log --stat </span><br><span class="line"></span><br><span class="line"># 添加所有的文件到仓库中(后面有个.)</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 恢复删除的文件，用到checkout这个命令</span><br><span class="line">$ git checkout</span><br><span class="line"></span><br><span class="line"># 把文件提交到本地仓库</span><br><span class="line">$ git commit -m &quot;类似于获奖感言之类的&quot;​</span><br><span class="line"></span><br><span class="line"># 获取最近一次修改的文件</span><br><span class="line">$ git diff --name-only HEAD~ HEAD</span><br><span class="line"></span><br><span class="line"># 导出最新的版本库</span><br><span class="line">$ git archive -o ..&#x2F;hellolatest.zip HEAD</span><br><span class="line"></span><br><span class="line"># 导出指定提交记录，后面的那串数字id，是提交了就会知道的</span><br><span class="line">$ git archive -o ..&#x2F;git-1.4.0.tar 8996b47 </span><br><span class="line"></span><br><span class="line"># 导出一个目录，HEAD:+目录</span><br><span class="line">$ git archive -o ..&#x2F;git-1.4.0-docs.zip  HEAD:Documentation&#x2F;  </span><br><span class="line"></span><br><span class="line"># 导出为tar.gz格式</span><br><span class="line">git archive 8996b47 | gzip &gt; ..&#x2F;git-1.4.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="git常见问题其实就是我遇到的问题"><a class="markdownIt-Anchor" href="#git常见问题其实就是我遇到的问题"></a> Git常见问题（其实就是我遇到的问题）</h3><ul><li>问题1：git push错误 remote: error: refusing to update checked out branch: refs/heads/master</li></ul><blockquote><p>这是由于git默认拒绝了push操作，需要进行设置，修改.git/config文件后面添加如下代码：<br />[receive]<br />denyCurrentBranch = ignore<br />然后再push就可以了</p></blockquote><ul><li>问题2：清空git库</li></ul><blockquote><p>在仓库目录输入：rm -rf .git</p></blockquote><ul><li>问题3：fatal: protocol error: bad line length character: No</li></ul><blockquote><p>没有当前仓库的权限，主要是远程仓库的权限</p></blockquote><ul><li>问题4：执行git remote add xxxx报错fatal: remote origin already exists.</li></ul><blockquote><p>git remote rm origin删除远程仓库的origin，然后再add添加远程仓库</p></blockquote><ul><li>问题5：执行git push origin master报错error: failed to push some refs to…</li></ul><blockquote><p>由于github中的README.md文件不在本地代码目录中导致的， 先通过git pull --rebase origin master进行合并，再通过git push -u origin master上传</p></blockquote><ul><li>问题6：执行git pull origin master报错fatal: refusing to merge unrelated histories</li></ul><blockquote><p>要把两个不同的项目合并，需要添加一个强制命令：git pull origin master --allow-unrelated-histories</p></blockquote><ul><li>问题7：git push -u origin master,报错fatal: Could not read from remote repository. Please make sure you have the correct access rights<br />and the repository exists.</li></ul><blockquote><p>我在网上查了下，很多都是没有ssh key配置的问题，但是我用的本地的虚拟机，所以不存在这个问题。后来我仔细检查了一下，是我粗心，把远程地址关联错了，打错了一个字，就出现没有权限访问的问题。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Git是个好东西，慢慢了解后，到使用它，管理代码，很是方便。在开发的工程中，总是会遇到一堆问题，最头疼的就是恢复上一个版本，或者找到很久不更新的代码，一般找来找去都会找不到。呵呵，我就是这样的啦。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="为学" scheme="bytebeta.github.io/tags/%E4%B8%BA%E5%AD%A6/"/>
    
      <category term="git" scheme="bytebeta.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>最近也比较烦吧</title>
    <link href="bytebeta.github.io/2018/09/06/%E6%9C%80%E8%BF%91%E4%B9%9F%E6%AF%94%E8%BE%83%E7%83%A6%E5%90%A7/"/>
    <id>bytebeta.github.io/2018/09/06/%E6%9C%80%E8%BF%91%E4%B9%9F%E6%AF%94%E8%BE%83%E7%83%A6%E5%90%A7/</id>
    <published>2018-09-06T03:32:21.000Z</published>
    <updated>2018-12-02T12:42:06.519Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每天下班都很累，可是事情呢，感觉又做不完，效率跟不上，沉不下心来。</p></blockquote><a id="more"></a><p>如果你认为很是了解你的人，突然有一天说了一些怼你的话，这些话让你突然感觉自己好像没有被了解过。对，我就是遇到这样的情况，那时候我连多说一句话的念头都没有了。</p><p>长时间不交流，就越来越不懂对方的内心想法，到最后，突然有一天对方发的一句话，让人感觉到无比的失望：你竟是如此的不了解我。看到对方的消息，还会烦躁，就连吱个声都觉得是无比的罪恶。好吧，我的暴脾气应该就是这么来的。</p><p>我会变成什么样子，我现在有点害怕了。今天下楼吃饭的时候，在镜子里看到自己的样子吓了一跳，原来自己在不知不觉中就变成一个胖子啦，还是有些失望的，很失望，长期焦虑，没有节制，生活不规律就这样，变得我自己都不知道自己是什么样子了。</p><p>————2018.12.2</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;每天下班都很累，可是事情呢，感觉又做不完，效率跟不上，沉不下心来。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="BB一下" scheme="bytebeta.github.io/tags/BB%E4%B8%80%E4%B8%8B/"/>
    
  </entry>
  
  <entry>
    <title>gSoap笔记</title>
    <link href="bytebeta.github.io/2018/09/04/gSoap%E7%AC%94%E8%AE%B0/"/>
    <id>bytebeta.github.io/2018/09/04/gSoap%E7%AC%94%E8%AE%B0/</id>
    <published>2018-09-04T13:37:16.000Z</published>
    <updated>2018-09-06T01:12:44.450Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最开始调用webservice，开发用的是MSSOAPLib30方式的，很头疼，需要自己拼接一下，自己用着感觉真的不方便。后来搞了几次对接webservice接口，就换了gSoap这个工具，解析webservice的地址，一下子就可以导出C/C++方式的头文件和cpp，真是爽，调用起来也是毫无压力，(<sup>_</sup>) 。</p></blockquote><a id="more"></a><h1 id="gsoap"><a class="markdownIt-Anchor" href="#gsoap"></a> gSoap</h1><h2 id="文档"><a class="markdownIt-Anchor" href="#文档"></a> 文档</h2><ul><li><a href="http://www.cs.fsu.edu/~engelen/soap.html" target="_blank" rel="noopener">官网文档1</a></li><li><a href="https://www.genivia.com/doc/soapdoc2.html#tth_sEc1.1" target="_blank" rel="noopener">官网文档2</a></li></ul><h2 id="基本用法"><a class="markdownIt-Anchor" href="#基本用法"></a> 基本用法：</h2><p>gSoap<a href="https://sourceforge.net/projects/gsoap2/files/" target="_blank" rel="noopener">下载</a>下来解压后,在<em>gsoap\bin\win32</em>目录下有<em>wsdl2h.exe</em>、<em>soapcpp2.exe</em>这个两个工具。<br /><strong>wsdl2h.exe</strong>是将webservice生成头文件的工具，<strong>soapcpp2.exe</strong>是将生成的头文件再生成我们需要调用的.h,cpp文件。<br /><strong>wsdl2h.exe</strong>使用例子，在cmd模式下，运行用法：</p><blockquote><p>wsdl2h -o 头文件名 WSDL文件名或URL<br />例：wsdl2h -s -o calc.h <a href="http://www.genivia.com/calc.wsdl" target="_blank" rel="noopener">http://www.genivia.com/calc.wsdl</a></p></blockquote><p><strong>wsdl2h.exe</strong>经常使用的指令</p><blockquote><p>-o 文件名，指定输出头文件<br />-n 名空间前缀 代替默认的ns<br />-c 产生纯C代码，否则是C++代码<br />-s 不要使用STL代码<br />-t 文件名，指定type map文件，默认为typemap.dat<br />-e 禁止为enum成员加上名空间前缀</p></blockquote><p><strong>soapcpp2.exe</strong>用法：</p><blockquote><p>soapcpp2 头文件<br />例：soapcpp2 -i -C -Iimport calc.h</p></blockquote><p><strong>soapcpp2.exe</strong>经常使用的指令</p><blockquote><p>-C 仅生成客户端代码<br />-S 仅生成服务器端代码<br />-L 不要产生soapClientLib.c和soapServerLib.c文件<br />-c 产生纯C代码，否则是C<ins>代码(与头文件有关)<br />-I 指定import路径（如果使用了STL就需要包含<em>gsoap\import</em>目录）<br />-x 不要产生XML示例文件<br />-i 生成C</ins>包装，客户端为xxxxProxy.h(.cpp)，服务器端为xxxxService.h(.cpp)。</p></blockquote><p>我用的是客户端，然后就直接把生成的文件几个文件拷到程序目录，调用就行了。一般就是五个</p><blockquote><p>calc.h、stdsoap2.h、stdsoap2.cpp、soapStub.h、soapH.h、soapC.cpp、soapClient.cpp<br />记得在VS编译器里面，把cpp的预编译去掉，不要包含StdAfx.h，就可以编译通过了。</p></blockquote><h2 id="使用技巧"><a class="markdownIt-Anchor" href="#使用技巧"></a> 使用技巧</h2><ol><li>调试模式</li></ol><blockquote><p>gSoap是提供调试的模式的，可以用来查看发送过去的数据报文是什么，收到的报文数据是什么，还有gSoap整个模式运行的记录。一般都在程序目录下包含这个三个文件<em>SENT.log</em>、<em>RECV.log</em>、<em>TEST.log</em>。</p></blockquote><p>需要在<em>stdsoap2.h</em>头文件中取消<strong>DEBUG_STAMP</strong>或者<strong>DEBUG</strong>的注释，就可以了。也可以自定义输出的这个调试记录的路径，官方代码是这样写的，我还没有测试。</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">soap</span> <span class="title">soap</span>;</span></span><br><span class="line">soap_init(&amp;soap);</span><br><span class="line">...</span><br><span class="line">soap_set_recv_logfile(&amp;soap, <span class="string">"logs/recv/service12.log"</span>); <span class="comment">// append all messages received in /logs/recv/service12.log</span></span><br><span class="line">soap_set_sent_logfile(&amp;soap, <span class="string">"logs/sent/service12.log"</span>); <span class="comment">// append all messages sent in /logs/sent/service12.log</span></span><br><span class="line">soap_set_test_logfile(&amp;soap, <span class="literal">NULL</span>); <span class="comment">// no file name: do not save debug messages</span></span><br><span class="line">...</span><br><span class="line">soap_serve(&amp;soap);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="2"><li>XML解析</li></ol><blockquote><p>gSoap提供解析XML的接口，我用了几次，感觉也挺方便的，该有的接口都有了。需要把<em>gsoap\dom.cpp</em>文件拷到你的程序目录下，包含引用一下就可以使用了。<strong>不过使用dom的时候需要在编译之前就引用import文件夹</strong>。</p></blockquote><p>例子代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">soap *ctx = soap_new1(SOAP_C_UTFSTRING | SOAP_XML_INDENT | SOAP_DOM_TREE);</span><br><span class="line"><span class="function">xsd__anyType <span class="title">dom</span><span class="params">(ctx, <span class="string">"menu"</span>)</span></span>;</span><br><span class="line">dom.att(<span class="string">"id"</span>) = <span class="number">7</span>;</span><br><span class="line">dom.att(<span class="string">"key"</span>) = <span class="string">L"⌘F"</span>;</span><br><span class="line">dom[<span class="string">"popup"</span>][<span class="string">"menuitem"</span>][<span class="number">1</span>].att(<span class="string">"value"</span>)   = <span class="string">"New"</span>;</span><br><span class="line">dom[<span class="string">"popup"</span>][<span class="string">"menuitem"</span>][<span class="number">1</span>].att(<span class="string">"onclick"</span>) = <span class="string">"CreateNewDoc()"</span>;</span><br><span class="line">dom[<span class="string">"popup"</span>][<span class="string">"menuitem"</span>][<span class="number">2</span>].att(<span class="string">"value"</span>)   = <span class="string">"Open"</span>;</span><br><span class="line">dom[<span class="string">"popup"</span>][<span class="string">"menuitem"</span>][<span class="number">2</span>].att(<span class="string">"onclick"</span>) = <span class="string">"OpenDoc()"</span>;</span><br><span class="line">dom[<span class="string">"popup"</span>][<span class="string">"menuitem"</span>][<span class="number">3</span>].att(<span class="string">"value"</span>)   = <span class="string">"Close"</span>;</span><br><span class="line">dom[<span class="string">"popup"</span>][<span class="string">"menuitem"</span>][<span class="number">3</span>].att(<span class="string">"onclick"</span>) = <span class="string">"CloseDoc()"</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dom;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最开始调用webservice，开发用的是MSSOAPLib30方式的，很头疼，需要自己拼接一下，自己用着感觉真的不方便。后来搞了几次对接webservice接口，就换了gSoap这个工具，解析webservice的地址，一下子就可以导出C/C++方式的头文件和cpp，真是爽，调用起来也是毫无压力，(&lt;sup&gt;_&lt;/sup&gt;) 。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="为学" scheme="bytebeta.github.io/tags/%E4%B8%BA%E5%AD%A6/"/>
    
      <category term="C++" scheme="bytebeta.github.io/tags/C/"/>
    
      <category term="gSoap" scheme="bytebeta.github.io/tags/gSoap/"/>
    
  </entry>
  
  <entry>
    <title>使用STL笔记</title>
    <link href="bytebeta.github.io/2018/09/03/%E4%BD%BF%E7%94%A8STL%E7%AC%94%E8%AE%B0/"/>
    <id>bytebeta.github.io/2018/09/03/%E4%BD%BF%E7%94%A8STL%E7%AC%94%E8%AE%B0/</id>
    <published>2018-09-03T03:23:31.000Z</published>
    <updated>2018-12-02T14:05:28.736Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Standard Template Library标准模板库，提供了很多方便的算法、容器等，工作过程中使用得当可以节约很多聊天吹水的时间，嗯，没错。</p></blockquote><a id="more"></a><h1 id="标准容器"><a class="markdownIt-Anchor" href="#标准容器"></a> 标准容器</h1><h2 id="vector"><a class="markdownIt-Anchor" href="#vector"></a> vector</h2><ul><li>内存问题<br />我就是经常用vector，里面只有int的时候用，包含多组类型的时候也用，习惯了就觉得很方便，不过后来发现一个坑，据说是vector clear后清空了数据，但是无法清空之前占用的内存空间，无法释放掉内存，稳妥的方式是swap一下vector空间。</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 给vector&lt;int&gt;申请空间</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 这个时候clear函数只是情况了数据，没有释放掉内存。</span></span><br><span class="line">v.clear();</span><br><span class="line"><span class="comment">// swap释放内存</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;().swap(v);</span><br><span class="line"><span class="comment">// c++11标准 shrink_to_fit也可以释放vector内存</span></span><br><span class="line">v.shrink_to_fit();</span><br></pre></td></tr></table></figure><ul><li>删除一个/多个元素</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除元素注意事项</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator iter = v.begin();</span><br><span class="line"><span class="comment">// 如果使用了iterator避免因为删除元素造成iter成为野指针</span></span><br><span class="line">iter = v.erase(iter);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接删除第2个元素</span></span><br><span class="line">v.erase(v.begin()+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除一段元素</span></span><br><span class="line">v.erase(v.begin()+<span class="number">1</span>, v.end()<span class="number">-1</span>);</span><br></pre></td></tr></table></figure><ul><li>插入多个元素，追加另一个vector</li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">23</span>);</span><br><span class="line">v1.push_back(<span class="number">12</span>);</span><br><span class="line"><span class="comment">// 把v1的内容插入到v中，对，是追加</span></span><br><span class="line">v.insert(v.end(), v1.begin(), v1.end());</span><br></pre></td></tr></table></figure><ul><li>查找元素<br />因为我经常要用到自定义函数，需要判断两个元素按照条件相等的情况，在元素类里面重载<mark>后用find就可以实现了。如果不重载</mark>的情况，就得用find_if，然后bind筛选条件。以下<a href="https://blog.csdn.net/wangshubo1989/article/details/50389811" target="_blank" rel="noopener">代码来源</a></li></ul><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Item</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span>  m_ItemId;</span><br><span class="line">    <span class="keyword">int</span> m_Price;</span><br><span class="line">    <span class="keyword">int</span> m_Count;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Item(<span class="built_in">std</span>::<span class="built_in">string</span> id, <span class="keyword">int</span> price, <span class="keyword">int</span> count) :</span><br><span class="line">        m_ItemId(id), m_Count(count), m_Price(price) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">getItemId</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_ItemId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_Price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> Item &amp; obj2) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>-&gt;getItemId().compare(obj2.getItemId()) == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">priceComparision</span><span class="params">(Item &amp; obj, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.getPrice() == y)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; <span class="title">getItemList</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; vecOfItems;</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D121"</span>, <span class="number">100</span>, <span class="number">2</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D122"</span>, <span class="number">12</span>, <span class="number">5</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D123"</span>, <span class="number">28</span>, <span class="number">6</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D124"</span>, <span class="number">8</span>, <span class="number">10</span>));</span><br><span class="line">    vecOfItems.push_back(Item(<span class="string">"D125"</span>, <span class="number">99</span>, <span class="number">3</span>));</span><br><span class="line">    <span class="keyword">return</span> vecOfItems;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt; vecOfItems = getItemList();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Item&gt;::iterator it;</span><br><span class="line">    <span class="comment">// find 查找</span></span><br><span class="line">    it = <span class="built_in">std</span>::find(vecOfItems.begin(), vecOfItems.end(), Item(<span class="string">"D123"</span>, <span class="number">99</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != vecOfItems.end())</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Found with Price ::"</span> &lt;&lt; it-&gt;getPrice() &lt;&lt; <span class="string">" Count :: "</span> &lt;&lt; it-&gt;getCount() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Item with ID :: D126 not Found"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// find_if 查找</span></span><br><span class="line">    <span class="comment">// placeholders是C++11的新特性，表示占位符，_1指代了回调函数的第一个参数。下面的例子里回调函数是priceComparision,它的第一个参数是Item</span></span><br><span class="line">    it = <span class="built_in">std</span>::find_if(vecOfItems.begin(), vecOfItems.end(), <span class="built_in">std</span>::bind(priceComparision, <span class="built_in">std</span>::placeholders::_1, <span class="number">28</span>));</span><br><span class="line">    <span class="keyword">if</span> (it != vecOfItems.end())</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Item Price ::"</span> &lt;&lt; it-&gt;getPrice() &lt;&lt; <span class="string">" Count :: "</span> &lt;&lt; it-&gt;getCount() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Item not Found"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Standard Template Library标准模板库，提供了很多方便的算法、容器等，工作过程中使用得当可以节约很多聊天吹水的时间，嗯，没错。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="为学" scheme="bytebeta.github.io/tags/%E4%B8%BA%E5%AD%A6/"/>
    
      <category term="C++" scheme="bytebeta.github.io/tags/C/"/>
    
      <category term="STL" scheme="bytebeta.github.io/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>读书清单</title>
    <link href="bytebeta.github.io/2018/09/01/%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/"/>
    <id>bytebeta.github.io/2018/09/01/%E8%AF%BB%E4%B9%A6%E6%B8%85%E5%8D%95/</id>
    <published>2018-09-01T14:13:29.000Z</published>
    <updated>2018-10-20T11:44:52.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>路漫漫其修远兮，吾将上下而求索。     —— 屈原·《离骚》</p></blockquote><a id="more"></a><p>先在这个做一个统计，统计下身边买了多少书了。</p><h4 id="计算机类"><a class="markdownIt-Anchor" href="#计算机类"></a> 计算机类</h4><ul><li>编程珠玑</li><li>现代操作系统</li><li>离散数学及其应用</li><li>设计模式·可复用面向对象软件的基础</li><li>C++语言描述·数据结构、算法与应用</li><li>软件建模与设计</li><li>编程之美</li><li>机器人学基础</li></ul><h4 id="杂类"><a class="markdownIt-Anchor" href="#杂类"></a> 杂类</h4><ul><li>白夜行</li><li>万历十五年</li><li>中国通史</li><li>名人传</li><li>娱乐至死</li><li>社会性动物</li><li>如何阅读一本书</li><li>与神对话1，2，3</li><li>传习录</li><li>知行合一·王阳明1，2，3</li></ul><h4 id="经济学类"><a class="markdownIt-Anchor" href="#经济学类"></a> 经济学类</h4><ul><li>斯坦福极简经济学</li><li>从零开始读懂经济学</li></ul><h4 id="最近读完的书"><a class="markdownIt-Anchor" href="#最近读完的书"></a> 最近读完的书</h4><ul><li>无声告白</li></ul><blockquote><p>我的梦想，会强加给我的孩子吗，我会忽略他们真实的喜好吗？</p></blockquote><ul><li>明朝那些事儿</li></ul><blockquote><p>王图霸业，终不过是尘土，苦的还是底层老百姓。能按照自己的意愿，过完这一生，无憾了。</p></blockquote><ul><li>富爸爸穷爸爸</li></ul><blockquote><p>工作不是目的，目的是不用工作。如何实现财务自由，怎么样才能改变？这是一个长远的问题，首先从思想认识上转变成“富人思想”。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;路漫漫其修远兮，吾将上下而求索。     —— 屈原·《离骚》&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="路漫漫" scheme="bytebeta.github.io/categories/%E8%B7%AF%E6%BC%AB%E6%BC%AB/"/>
    
    
      <category term="为学" scheme="bytebeta.github.io/tags/%E4%B8%BA%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>我喜欢出发</title>
    <link href="bytebeta.github.io/2018/09/01/%E6%88%91%E5%96%9C%E6%AC%A2%E5%87%BA%E5%8F%91/"/>
    <id>bytebeta.github.io/2018/09/01/%E6%88%91%E5%96%9C%E6%AC%A2%E5%87%BA%E5%8F%91/</id>
    <published>2018-09-01T01:08:00.000Z</published>
    <updated>2018-09-03T03:30:18.746Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>还记得高中的时候，读到了汪国真的散文、诗歌，特别喜欢，课后还一直背诵。最近才开始写博客了，所以拿这一篇作为开篇，嗯，对我来说有不少意义呢。<br />有时候觉得：人生就是这么奇妙。</p></blockquote><a id="more"></a><h1 id="p-aligncenter我喜欢出发p"><a class="markdownIt-Anchor" href="#p-aligncenter我喜欢出发p"></a> <p align="center">我喜欢出发</p></h1><p align="center">作者：汪国真</p>凡是到达了的地方，都属于昨天。哪怕那山再青，那水再秀，那风再温柔。太深的流连便成了一种羁绊，绊住的不仅是双脚，还有未来。<p>怎么能不喜欢出发呢？没见过大山的巍峨，真是遗憾；见了大山的巍峨没见过大海的浩翰，仍然是遗憾；见了大海的浩翰没见过大漠的广袤，依旧遗憾；见了大漠的广袤没见过森林的神秘，还是遗憾。世界上有不绝的风景，我有不老的心情。</p><p>我自然知道，大山有坎坷，大海有浪涛，大漠有风沙，森林有猛兽。即便这样，我依然喜欢。</p><p>打破生活的平静便是另一番景致，一种属于年轻的景致。真庆幸我还没有老。即便真老了又怎么样，不是有句话叫老当益壮吗？</p><p>于是我想从大山那里学习深刻，我还想从大海那里学习勇敢，我还想从大漠那里学习沉着，我还想从森林那里学习机敏。我还想学着品味一种缤纷的人生。</p><p>人能走多远？这话不是要问两脚而是要问志向；人能攀多高？这事不是要问双手而是要问意志。于是，我想用热血给自己树起一个高远的目标。不仅是为了争取一种光荣，更是为了追求一种境界。目标实现了，是光荣；目标实现不了，人生也会因这一路风雨跋涉变得丰富而充实；在我看来，这就是不虚此生。</p><p>是的，我喜欢出发，愿你也喜欢。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;还记得高中的时候，读到了汪国真的散文、诗歌，特别喜欢，课后还一直背诵。最近才开始写博客了，所以拿这一篇作为开篇，嗯，对我来说有不少意义呢。&lt;br /&gt;
有时候觉得：人生就是这么奇妙。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="诗词歌赋了解一下" scheme="bytebeta.github.io/categories/%E8%AF%97%E8%AF%8D%E6%AD%8C%E8%B5%8B%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B/"/>
    
    
      <category term="散文" scheme="bytebeta.github.io/tags/%E6%95%A3%E6%96%87/"/>
    
      <category term="汪国真" scheme="bytebeta.github.io/tags/%E6%B1%AA%E5%9B%BD%E7%9C%9F/"/>
    
  </entry>
  
</feed>
